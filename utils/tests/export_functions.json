{
  "documented_calculators": {
    "pdf": [
      "TransformerLineSection",
      "ProtectionRequirementsSection",
      "WindTurbineSection",
      "NetworkCabinetCalculator",
      "DiscriminationAnalyzer",
      "VoltageDropCalculator",
      "SolkorRf",
      "VoltageDropOrion"
    ],
    "csv": [
      "MotorStartingCalculator",
      "HarmonicsAnalyzer"
    ],
    "json": [
      "CalculatorSettings"
    ],
    "png": [
      "VR32CL7Calculator"
    ]
  },
  "export_functions": {
    "other": [
      {
        "file": "qml/calculators/grid_wind/ProtectionRequirementsSection.qml",
        "calculator": "ProtectionRequirementsSection",
        "function": "function exportProtectionSettings(filePath)",
        "content": "function exportProtectionSettings(filePath) {\n        if (transformerReady && windTurbineReady) {\n            // Calculate needed values\n            let generatorCurrent = (windTurbineCalculator.actualPower * 1000) / (Math.sqrt(3) * 400);\n            let transformerCurrent = calculateTransformerFullLoadCurrent();\n            \n            // Build complete data structure with all required values\n            const exportData = {\n                \"generator\": {\n                    \"power\": Number(windTurbineCalculator.actualPower),\n                    \"current\": Number(generatorCurrent),\n                    \"capacity\": Number(windTurbineCalculator.actualPower * 1.2),\n                    \"voltage_range\": \"\u00b115% (340V - 460V)\",\n                    \"frequency_range\": \"\u00b12% (49Hz - 51Hz)\",\n                    \"earth_fault\": \"30% of FLC\",\n                    \"anti_islanding\": \"Required\",\n                    \"overcurrent_pickup\": Number(generatorCurrent * 1.5),\n                    \"time_delay\": \"0.5s\",\n                    \"ct_ratio\": determineCtRatio(generatorCurrent)\n                }"
      },
      {
        "file": "qml/calculators/grid_wind/WindTurbineSection.qml",
        "calculator": "WindTurbineSection",
        "function": "exportWindTurbineReport(null, tempImagePath)",
        "content": "exportWindTurbineReport(null, tempImagePath)"
      },
      {
        "file": "qml/calculators/grid_wind/WindTurbineSection.qml",
        "calculator": "WindTurbineSection",
        "function": "exportWindTurbineReport(null, \"\")",
        "content": "exportWindTurbineReport(null, \"\")"
      },
      {
        "file": "qml/calculators/grid_wind/TransformerLineSection.qml",
        "calculator": "TransformerLineSection",
        "function": "function exportReport()",
        "content": "function exportReport() {\n        if (!calculatorReady) return;\n        \n        // Export using null to let FileSaver handle the file dialog\n        calculator.exportTransformerReport(null, null);\n    }"
      },
      {
        "file": "qml/calculators/three_phase/ThreePhase.qml",
        "calculator": "ThreePhase",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../three_phase/\"\n\nimport Sine 1.0\n\nPage",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../three_phase/\"\n\nimport Sine 1.0\n\nPage {\n    id: root\n\n    property color textColorPhase: window.modeToggled ? \"#ffffff\" : \"#000000\"\n    property ThreePhaseSineWaveModel calculator: ThreePhaseSineWaveModel{}\n\n    PopUpText {\n        id: popUpText\n        parentCard: topHeader\n        popupText: \"<h3>Three-Phase Power</h3><br>Three-phase power is a common method of electric power transmission and distribution\" +\n        \" that is used to power large motors and other heavy loads. It is also used in residential and commercial buildings to power large appliances and lighting systems.<br>\" +\n        \" A three-phase system consists of three conductors carrying alternating current of the same frequency and voltage amplitude relative to a common reference, but with a phase difference of one third of a cycle between each.<br>\" +\n        \" The voltage generated by three-phase power is typically expressed as a line-to-line voltage. The power delivered by a three-phase system is the same as the power in a single-phase system, but the power is distributed across three phases, which reduces the amount of current required to deliver the same amount of power.<br>\" +\n        \" This reduces the size of the conductors and the amount of power lost in transmission. The three-phase system also allows for the use of three-phase motors, which are more efficient and have a higher power-to-weight ratio than single-phase motors.<br>\"\n    }\n\n    ScrollView {\n        id: scrollView\n        anchors.fill: parent\n        clip: true\n        \n        Flickable {\n            id: flickableContainer\n            contentWidth: parent.width\n            contentHeight: mainLayout.height\n            bottomMargin : 5\n            leftMargin : 5\n            rightMargin : 5\n            topMargin : 5\n\n            ColumnLayout {\n                id: mainLayout\n                width: flickableContainer.width - 20\n\n                // Header with title and help button\n                RowLayout {\n                    id: topHeader\n                    Layout.fillWidth: true\n                    Layout.bottomMargin: 5\n                    Layout.leftMargin: 5\n\n                    Label {\n                        text: \"Three-Phase Visualizer\"\n                        font.pixelSize: 20\n                        font.bold: true\n                        Layout.fillWidth: true\n                    }\n\n                    StyledButton {\n                        id: helpButton\n                        icon.source: \"../../../icons/rounded/info.svg\"\n                        ToolTip.text: \"Information\"\n                        ToolTip.visible: hovered\n                        ToolTip.delay: 500\n                        onClicked: popUpText.open()"
      },
      {
        "file": "qml/calculators/three_phase/ThreePhase.qml",
        "calculator": "ThreePhaseCalculator",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../three_phase/\"\n\nimport Sine 1.0\n\nPage",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../three_phase/\"\n\nimport Sine 1.0\n\nPage {\n    id: root\n\n    property color textColorPhase: window.modeToggled ? \"#ffffff\" : \"#000000\"\n    property ThreePhaseSineWaveModel calculator: ThreePhaseSineWaveModel{}\n\n    PopUpText {\n        id: popUpText\n        parentCard: topHeader\n        popupText: \"<h3>Three-Phase Power</h3><br>Three-phase power is a common method of electric power transmission and distribution\" +\n        \" that is used to power large motors and other heavy loads. It is also used in residential and commercial buildings to power large appliances and lighting systems.<br>\" +\n        \" A three-phase system consists of three conductors carrying alternating current of the same frequency and voltage amplitude relative to a common reference, but with a phase difference of one third of a cycle between each.<br>\" +\n        \" The voltage generated by three-phase power is typically expressed as a line-to-line voltage. The power delivered by a three-phase system is the same as the power in a single-phase system, but the power is distributed across three phases, which reduces the amount of current required to deliver the same amount of power.<br>\" +\n        \" This reduces the size of the conductors and the amount of power lost in transmission. The three-phase system also allows for the use of three-phase motors, which are more efficient and have a higher power-to-weight ratio than single-phase motors.<br>\"\n    }\n\n    ScrollView {\n        id: scrollView\n        anchors.fill: parent\n        clip: true\n        \n        Flickable {\n            id: flickableContainer\n            contentWidth: parent.width\n            contentHeight: mainLayout.height\n            bottomMargin : 5\n            leftMargin : 5\n            rightMargin : 5\n            topMargin : 5\n\n            ColumnLayout {\n                id: mainLayout\n                width: flickableContainer.width - 20\n\n                // Header with title and help button\n                RowLayout {\n                    id: topHeader\n                    Layout.fillWidth: true\n                    Layout.bottomMargin: 5\n                    Layout.leftMargin: 5\n\n                    Label {\n                        text: \"Three-Phase Visualizer\"\n                        font.pixelSize: 20\n                        font.bold: true\n                        Layout.fillWidth: true\n                    }\n\n                    StyledButton {\n                        id: helpButton\n                        icon.source: \"../../../icons/rounded/info.svg\"\n                        ToolTip.text: \"Information\"\n                        ToolTip.visible: hovered\n                        ToolTip.delay: 500\n                        onClicked: popUpText.open()"
      },
      {
        "file": "qml/calculators/protection/DiscriminationAnalyzer.qml",
        "calculator": "DiscriminationAnalyzer",
        "function": "exportButton\n                                    text: \"Export Results\"\n                                    Layout.columnSpan: 2\n\n                                    ToolTip.text: \"Export results to PDF\"\n                                    ToolTip.visible: hovered\n                                    ToolTip.delay: 500\n                                    \n                                    visible: calculator.relayCount >= 2\n                                    icon.source: \"../../../icons/rounded/download.svg\"\n                                    \n                                    onClicked:",
        "content": "exportButton\n                                    text: \"Export Results\"\n                                    Layout.columnSpan: 2\n\n                                    ToolTip.text: \"Export results to PDF\"\n                                    ToolTip.visible: hovered\n                                    ToolTip.delay: 500\n                                    \n                                    visible: calculator.relayCount >= 2\n                                    icon.source: \"../../../icons/rounded/download.svg\"\n                                    \n                                    onClicked: {\n                                        calculator.exportResults()"
      },
      {
        "file": "qml/calculators/protection/DiscriminationAnalyzer.qml",
        "calculator": "DiscriminationAnalyzerCalculator",
        "function": "exportButton\n                                    text: \"Export Results\"\n                                    Layout.columnSpan: 2\n\n                                    ToolTip.text: \"Export results to PDF\"\n                                    ToolTip.visible: hovered\n                                    ToolTip.delay: 500\n                                    \n                                    visible: calculator.relayCount >= 2\n                                    icon.source: \"../../../icons/rounded/download.svg\"\n                                    \n                                    onClicked:",
        "content": "exportButton\n                                    text: \"Export Results\"\n                                    Layout.columnSpan: 2\n\n                                    ToolTip.text: \"Export results to PDF\"\n                                    ToolTip.visible: hovered\n                                    ToolTip.delay: 500\n                                    \n                                    visible: calculator.relayCount >= 2\n                                    icon.source: \"../../../icons/rounded/download.svg\"\n                                    \n                                    onClicked: {\n                                        calculator.exportResults()"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRf",
        "function": "exports\"\n\nimport SolkorRfCalculator 1.0\n\nItem",
        "content": "exports\"\n\nimport SolkorRfCalculator 1.0\n\nItem {\n\n    property SolkorRfCalculator calculator: SolkorRfCalculator {}\n\n    function saveToPdf()"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRfCalculator",
        "function": "exports\"\n\nimport SolkorRfCalculator 1.0\n\nItem",
        "content": "exports\"\n\nimport SolkorRfCalculator 1.0\n\nItem {\n\n    property SolkorRfCalculator calculator: SolkorRfCalculator {}\n\n    function saveToPdf()"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRf",
        "function": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)",
        "content": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRfCalculator",
        "function": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)",
        "content": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzer",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\nimport \"../../components/menus\"\n\nimport HarmonicAnalysis 1.0\nimport SeriesHelper 1.0\n\nItem",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\nimport \"../../components/menus\"\n\nimport HarmonicAnalysis 1.0\nimport SeriesHelper 1.0\n\nItem {\n    id: harmonicsCard\n\n    property HarmonicAnalysisCalculator calculator: HarmonicAnalysisCalculator {}\n    property SeriesHelper seriesHelper: SeriesHelper {}\n\n    Timer {\n        id: updateWaveformTimer\n        interval: Qt.platform.os === \"windows\" ? 100 : 50\n        running: false\n        repeat: false\n        onTriggered: {\n            if (waveformVisualizer)"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzerCalculator",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\nimport \"../../components/menus\"\n\nimport HarmonicAnalysis 1.0\nimport SeriesHelper 1.0\n\nItem",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\nimport \"../../components/menus\"\n\nimport HarmonicAnalysis 1.0\nimport SeriesHelper 1.0\n\nItem {\n    id: harmonicsCard\n\n    property HarmonicAnalysisCalculator calculator: HarmonicAnalysisCalculator {}\n    property SeriesHelper seriesHelper: SeriesHelper {}\n\n    Timer {\n        id: updateWaveformTimer\n        interval: Qt.platform.os === \"windows\" ? 100 : 50\n        running: false\n        repeat: false\n        onTriggered: {\n            if (waveformVisualizer)"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzer",
        "function": "export the harmonic data to a CSV file for further analysis.\"\n    }\n\n    ColumnLayout",
        "content": "export the harmonic data to a CSV file for further analysis.\"\n    }\n\n    ColumnLayout {\n        id: mainLayout\n        anchors.fill: parent\n\n        RowLayout {\n            Layout.fillWidth: true\n            Layout.bottomMargin: 5\n            Layout.leftMargin: 5\n\n            Label {\n                text: \"Harmonics Analyzer\"\n                font.pixelSize: 20\n                font.bold: true\n                Layout.fillWidth: true\n            }\n\n            StyledButton {\n                id: helpButton\n                icon.source: \"../../../icons/rounded/info.svg\"\n                onClicked: popUpText.open()"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzerCalculator",
        "function": "export the harmonic data to a CSV file for further analysis.\"\n    }\n\n    ColumnLayout",
        "content": "export the harmonic data to a CSV file for further analysis.\"\n    }\n\n    ColumnLayout {\n        id: mainLayout\n        anchors.fill: parent\n\n        RowLayout {\n            Layout.fillWidth: true\n            Layout.bottomMargin: 5\n            Layout.leftMargin: 5\n\n            Label {\n                text: \"Harmonics Analyzer\"\n                font.pixelSize: 20\n                font.bold: true\n                Layout.fillWidth: true\n            }\n\n            StyledButton {\n                id: helpButton\n                icon.source: \"../../../icons/rounded/info.svg\"\n                onClicked: popUpText.open()"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzer",
        "function": "exportDataToCSV(null)",
        "content": "exportDataToCSV(null)"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzerCalculator",
        "function": "exportDataToCSV(null)",
        "content": "exportDataToCSV(null)"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzer",
        "function": "exportMouseArea.containsMouse\n                        ToolTip.delay: 500\n                        \n                        MouseArea",
        "content": "exportMouseArea.containsMouse\n                        ToolTip.delay: 500\n                        \n                        MouseArea {\n                            id: exportMouseArea\n                            anchors.fill: parent\n                            hoverEnabled: true\n                            propagateComposedEvents: true\n                            onPressed: function(mouse)"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzerCalculator",
        "function": "exportMouseArea.containsMouse\n                        ToolTip.delay: 500\n                        \n                        MouseArea",
        "content": "exportMouseArea.containsMouse\n                        ToolTip.delay: 500\n                        \n                        MouseArea {\n                            id: exportMouseArea\n                            anchors.fill: parent\n                            hoverEnabled: true\n                            propagateComposedEvents: true\n                            onPressed: function(mouse)"
      },
      {
        "file": "qml/calculators/theory/MotorStartingCalculator.qml",
        "calculator": "MotorStartingCalculator",
        "function": "exports\"\nimport \"../../components/menus\"\n\nimport MotorStarting 1.0\n\nItem",
        "content": "exports\"\nimport \"../../components/menus\"\n\nimport MotorStarting 1.0\n\nItem {\n    id: motorStartingCard\n\n    property MotorStartingCalculator calculator: MotorStartingCalculator {}\n    property real cachedStartingMultiplier: calculator ? calculator.startingMultiplier : 7.0\n    property real cachedStartingTorque: calculator ? calculator.startingTorque : 1.0\n    property bool hasValidInputs: motorPower.text.length > 0 && \n                                 parseFloat(motorPower.text)"
      },
      {
        "file": "qml/calculators/theory/MotorStartingCalculator.qml",
        "calculator": "MotorStartingCalculator",
        "function": "exportButton\n                        icon.source: \"../../../icons/rounded/download.svg\"\n                        enabled: hasValidInputs && calculator.startingCurrent > 0\n                        onClicked: calculator.exportResults(null)",
        "content": "exportButton\n                        icon.source: \"../../../icons/rounded/download.svg\"\n                        enabled: hasValidInputs && calculator.startingCurrent > 0\n                        onClicked: calculator.exportResults(null)"
      },
      {
        "file": "qml/calculators/theory/RLC.qml",
        "calculator": "RLC",
        "function": "exports\"\nimport \"../../components/charts\"\n\nimport RLC 1.0\n\nPage",
        "content": "exports\"\nimport \"../../components/charts\"\n\nimport RLC 1.0\n\nPage {\n    id: rlcPage\n\n    property RLCChart calculator: RLCChart {id: rlcChart}\n    property int currentMode: switchOn.checked ? 1 : 0\n\n    background: Rectangle {\n        color: window.modeToggled ? \"#1a1a1a\" : \"#f5f5f5\"\n    }\n\n    Connections {\n        target: calculator\n    }\n\n    function react()"
      },
      {
        "file": "qml/calculators/theory/RLC.qml",
        "calculator": "RLCCalculator",
        "function": "exports\"\nimport \"../../components/charts\"\n\nimport RLC 1.0\n\nPage",
        "content": "exports\"\nimport \"../../components/charts\"\n\nimport RLC 1.0\n\nPage {\n    id: rlcPage\n\n    property RLCChart calculator: RLCChart {id: rlcChart}\n    property int currentMode: switchOn.checked ? 1 : 0\n\n    background: Rectangle {\n        color: window.modeToggled ? \"#1a1a1a\" : \"#f5f5f5\"\n    }\n\n    Connections {\n        target: calculator\n    }\n\n    function react()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/monitors\"\nimport \"../voltage_drop/\"\n\nimport VDrop 1.0\n\nPage",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/monitors\"\nimport \"../voltage_drop/\"\n\nimport VDrop 1.0\n\nPage {\n    id: root\n    padding: 0\n\n    property VoltageDropCalculator calculator: VoltageDropCalculator {\n        id: voltageDrop\n        \n        Component.onCompleted: {\n            // Initialize from saved settings\n            if (typeof appConfig !== 'undefined')"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/monitors\"\nimport \"../voltage_drop/\"\n\nimport VDrop 1.0\n\nPage",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/monitors\"\nimport \"../voltage_drop/\"\n\nimport VDrop 1.0\n\nPage {\n    id: root\n    padding: 0\n\n    property VoltageDropCalculator calculator: VoltageDropCalculator {\n        id: voltageDrop\n        \n        Component.onCompleted: {\n            // Initialize from saved settings\n            if (typeof appConfig !== 'undefined')"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportTableData(null)",
        "content": "exportTableData(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportTableData(null)",
        "content": "exportTableData(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportTableToPDF(null)",
        "content": "exportTableToPDF(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportTableToPDF(null)",
        "content": "exportTableToPDF(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportFormatMenu.popup()",
        "content": "exportFormatMenu.popup()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportFormatMenu.popup()",
        "content": "exportFormatMenu.popup()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportFileDialog.setup(\"Save Chart\", \"PNG files (*.png)",
        "content": "exportFileDialog.setup(\"Save Chart\", \"PNG files (*.png)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportFileDialog.setup(\"Save Chart\", \"PNG files (*.png)",
        "content": "exportFileDialog.setup(\"Save Chart\", \"PNG files (*.png)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportFileDialog.chartExport)\n            exportFileDialog.currentScale = scale\n            exportFileDialog.open()",
        "content": "exportFileDialog.chartExport)\n            exportFileDialog.currentScale = scale\n            exportFileDialog.open()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportFileDialog.chartExport)\n            exportFileDialog.currentScale = scale\n            exportFileDialog.open()",
        "content": "exportFileDialog.chartExport)\n            exportFileDialog.currentScale = scale\n            exportFileDialog.open()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportFileDialog\n\n        function handleExport(selectedFile)",
        "content": "exportFileDialog\n\n        function handleExport(selectedFile)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportFileDialog\n\n        function handleExport(selectedFile)",
        "content": "exportFileDialog\n\n        function handleExport(selectedFile)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportType)",
        "content": "exportType) {\n                case chartExport:\n                    voltageDrop.saveChart(selectedFile, currentScale)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportType)",
        "content": "exportType) {\n                case chartExport:\n                    voltageDrop.saveChart(selectedFile, currentScale)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportTableData(selectedFile)",
        "content": "exportTableData(selectedFile)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportTableData(selectedFile)",
        "content": "exportTableData(selectedFile)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportTableToPDF(selectedFile)",
        "content": "exportTableToPDF(selectedFile)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportTableToPDF(selectedFile)",
        "content": "exportTableToPDF(selectedFile)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportDetailsToPDF(selectedFile, details)",
        "content": "exportDetailsToPDF(selectedFile, details)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportDetailsToPDF(selectedFile, details)",
        "content": "exportDetailsToPDF(selectedFile, details)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportFormatMenu\n        \n        Component.onCompleted:",
        "content": "exportFormatMenu\n        \n        Component.onCompleted: {\n            onCsvExport = function()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportFormatMenu\n        \n        Component.onCompleted:",
        "content": "exportFormatMenu\n        \n        Component.onCompleted: {\n            onCsvExport = function()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportTableData(null)",
        "content": "exportTableData(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportTableData(null)",
        "content": "exportTableData(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportTableToPDF(null)",
        "content": "exportTableToPDF(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportTableToPDF(null)",
        "content": "exportTableToPDF(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "exportDetailsToPDF(null,",
        "content": "exportDetailsToPDF(null, {\n                \"voltage_system\": detailsPopup.voltageSystem || \"Unknown\",\n                \"admd_enabled\": !!detailsPopup.admdEnabled,\n                \"kva_per_house\": safeValue(detailsPopup.kvaPerHouse)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "exportDetailsToPDF(null,",
        "content": "exportDetailsToPDF(null, {\n                \"voltage_system\": detailsPopup.voltageSystem || \"Unknown\",\n                \"admd_enabled\": !!detailsPopup.admdEnabled,\n                \"kva_per_house\": safeValue(detailsPopup.kvaPerHouse)"
      },
      {
        "file": "qml/calculators/voltage_drop/ResultsPanel.qml",
        "calculator": "ResultsPanel",
        "function": "saveResultsClicked()",
        "content": "saveResultsClicked()"
      },
      {
        "file": "qml/calculators/voltage_drop/ResultsPanel.qml",
        "calculator": "ResultsPanelCalculator",
        "function": "saveResultsClicked()",
        "content": "saveResultsClicked()"
      },
      {
        "file": "qml/calculators/voltage_drop/ResultsPanel.qml",
        "calculator": "ResultsPanel",
        "function": "saveResultsClicked()",
        "content": "saveResultsClicked()"
      },
      {
        "file": "qml/calculators/voltage_drop/ResultsPanel.qml",
        "calculator": "ResultsPanelCalculator",
        "function": "saveResultsClicked()",
        "content": "saveResultsClicked()"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "exportToPdf(folderDialog.folder, diagramImage)",
        "content": "exportToPdf(folderDialog.folder, diagramImage)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "exportButton\n                        text: \"Export PDF\"\n                        icon.source: \"../../../icons/rounded/download.svg\"\n                        ToolTip.text: \"Export configuration to PDF\"\n                        ToolTip.visible: hovered\n                        ToolTip.delay: 500\n                        onClicked:",
        "content": "exportButton\n                        text: \"Export PDF\"\n                        icon.source: \"../../../icons/rounded/download.svg\"\n                        ToolTip.text: \"Export configuration to PDF\"\n                        ToolTip.visible: hovered\n                        ToolTip.delay: 500\n                        onClicked: {\n                            // Force diagram to update before capture to ensure current settings\n                            cabinetDiagram.updatePanelVisibility()"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "exportToPdf(null, diagramImage)",
        "content": "exportToPdf(null, diagramImage)"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "export of the full switchboard schedule.<br><br>\" +\n                   \"Double-click any row to edit circuit details, or use the + button to add a new circuit.\"\n        widthFactor: 0.5\n        heightFactor: 0.5\n    }\n\n    ColumnLayout",
        "content": "export of the full switchboard schedule.<br><br>\" +\n                   \"Double-click any row to edit circuit details, or use the + button to add a new circuit.\"\n        widthFactor: 0.5\n        heightFactor: 0.5\n    }\n\n    ColumnLayout {\n        anchors.fill: parent\n        anchors.leftMargin: 5\n        anchors.rightMargin: 5\n        anchors.bottomMargin: 5\n\n        // Header with title and help button\n        RowLayout {\n            id: topHeader\n            Layout.fillWidth: true\n            Layout.bottomMargin: 5\n            Layout.leftMargin: 5\n\n            Label {\n                text: \"Switchboard\"\n                font.pixelSize: 20\n                font.bold: true\n                Layout.fillWidth: true\n            }\n\n            StyledButton {\n                id: helpButton\n                icon.source: \"../../../icons/rounded/info.svg\"\n                ToolTip.text: \"Information\"\n                ToolTip.visible: hovered\n                ToolTip.delay: 500\n                onClicked: popUpText.open()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "export of the full switchboard schedule.<br><br>\" +\n                   \"Double-click any row to edit circuit details, or use the + button to add a new circuit.\"\n        widthFactor: 0.5\n        heightFactor: 0.5\n    }\n\n    ColumnLayout",
        "content": "export of the full switchboard schedule.<br><br>\" +\n                   \"Double-click any row to edit circuit details, or use the + button to add a new circuit.\"\n        widthFactor: 0.5\n        heightFactor: 0.5\n    }\n\n    ColumnLayout {\n        anchors.fill: parent\n        anchors.leftMargin: 5\n        anchors.rightMargin: 5\n        anchors.bottomMargin: 5\n\n        // Header with title and help button\n        RowLayout {\n            id: topHeader\n            Layout.fillWidth: true\n            Layout.bottomMargin: 5\n            Layout.leftMargin: 5\n\n            Label {\n                text: \"Switchboard\"\n                font.pixelSize: 20\n                font.bold: true\n                Layout.fillWidth: true\n            }\n\n            StyledButton {\n                id: helpButton\n                icon.source: \"../../../icons/rounded/info.svg\"\n                ToolTip.text: \"Information\"\n                ToolTip.visible: hovered\n                ToolTip.delay: 500\n                onClicked: popUpText.open()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "exportMenu.open()",
        "content": "exportMenu.open()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "exportMenu.open()",
        "content": "exportMenu.open()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "exportMenu\n                            MenuItem",
        "content": "exportMenu\n                            MenuItem {\n                                text: \"Export as CSV\"\n                                onTriggered: {\n                                    let result = manager.exportCSV()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "exportMenu\n                            MenuItem",
        "content": "exportMenu\n                            MenuItem {\n                                text: \"Export as CSV\"\n                                onTriggered: {\n                                    let result = manager.exportCSV()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "exportPDF()",
        "content": "exportPDF()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "exportPDF()",
        "content": "exportPDF()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "printSchedule()",
        "content": "printSchedule()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "printSchedule()",
        "content": "printSchedule()"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChart",
        "function": "function exportChartData(format)",
        "content": "function exportChartData(format) {\n        let data = {\n            currentPoint: {\n                cableSize: chartComponent.cableSize,\n                dropPercentage: chartComponent.percentage,\n                current: chartComponent.currentValue\n            }"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChartCalculator",
        "function": "function exportChartData(format)",
        "content": "function exportChartData(format) {\n        let data = {\n            currentPoint: {\n                cableSize: chartComponent.cableSize,\n                dropPercentage: chartComponent.percentage,\n                current: chartComponent.currentValue\n            }"
      },
      {
        "file": "qml/components/charts/DiscriminationChart.qml",
        "calculator": "DiscriminationChart",
        "function": "export\n        chart.antialiasing = true\n        \n        // Calculate proper aspect ratio based on current chart dimensions\n        let originalWidth = chart.width\n        let originalHeight = chart.height\n        let aspectRatio = originalHeight / originalWidth\n        \n        // Use extremely high resolution for vector-like quality\n        let targetWidth = 8000\n        let targetHeight = Math.round(targetWidth * aspectRatio)",
        "content": "export\n        chart.antialiasing = true\n        \n        // Calculate proper aspect ratio based on current chart dimensions\n        let originalWidth = chart.width\n        let originalHeight = chart.height\n        let aspectRatio = originalHeight / originalWidth\n        \n        // Use extremely high resolution for vector-like quality\n        let targetWidth = 8000\n        let targetHeight = Math.round(targetWidth * aspectRatio)"
      },
      {
        "file": "qml/components/charts/DiscriminationChart.qml",
        "calculator": "DiscriminationChartCalculator",
        "function": "export\n        chart.antialiasing = true\n        \n        // Calculate proper aspect ratio based on current chart dimensions\n        let originalWidth = chart.width\n        let originalHeight = chart.height\n        let aspectRatio = originalHeight / originalWidth\n        \n        // Use extremely high resolution for vector-like quality\n        let targetWidth = 8000\n        let targetHeight = Math.round(targetWidth * aspectRatio)",
        "content": "export\n        chart.antialiasing = true\n        \n        // Calculate proper aspect ratio based on current chart dimensions\n        let originalWidth = chart.width\n        let originalHeight = chart.height\n        let aspectRatio = originalHeight / originalWidth\n        \n        // Use extremely high resolution for vector-like quality\n        let targetWidth = 8000\n        let targetHeight = Math.round(targetWidth * aspectRatio)"
      },
      {
        "file": "qml/components/logging/LogViewer.qml",
        "calculator": "LogViewer",
        "function": "exportFileDialog\n        title: \"Export All Log History\"\n        nameFilters: [\"Text files (*.txt)",
        "content": "exportFileDialog\n        title: \"Export All Log History\"\n        nameFilters: [\"Text files (*.txt)"
      },
      {
        "file": "qml/components/logging/LogViewer.qml",
        "calculator": "LogViewerCalculator",
        "function": "exportFileDialog\n        title: \"Export All Log History\"\n        nameFilters: [\"Text files (*.txt)",
        "content": "exportFileDialog\n        title: \"Export All Log History\"\n        nameFilters: [\"Text files (*.txt)"
      },
      {
        "file": "qml/components/logging/LogViewer.qml",
        "calculator": "LogViewer",
        "function": "exportAllLogs)",
        "content": "exportAllLogs) {\n                if (logManager.exportAllLogs(selectedFile)"
      },
      {
        "file": "qml/components/logging/LogViewer.qml",
        "calculator": "LogViewerCalculator",
        "function": "exportAllLogs)",
        "content": "exportAllLogs) {\n                if (logManager.exportAllLogs(selectedFile)"
      },
      {
        "file": "qml/components/exports/ExportFileDialog.qml",
        "calculator": "ExportFileDialog",
        "function": "exportType: chartExport\n    property real currentScale: 2.0\n    property var handler: null\n    property var details: null\n    \n    function setup(dialogTitle, filters, suffix, baseFilename, type, callback)",
        "content": "exportType: chartExport\n    property real currentScale: 2.0\n    property var handler: null\n    property var details: null\n    \n    function setup(dialogTitle, filters, suffix, baseFilename, type, callback)"
      },
      {
        "file": "qml/components/exports/ExportFileDialog.qml",
        "calculator": "ExportFileDialogCalculator",
        "function": "exportType: chartExport\n    property real currentScale: 2.0\n    property var handler: null\n    property var details: null\n    \n    function setup(dialogTitle, filters, suffix, baseFilename, type, callback)",
        "content": "exportType: chartExport\n    property real currentScale: 2.0\n    property var handler: null\n    property var details: null\n    \n    function setup(dialogTitle, filters, suffix, baseFilename, type, callback)"
      },
      {
        "file": "qml/components/exports/ExportFileDialog.qml",
        "calculator": "ExportFileDialog",
        "function": "exportType = type\n        handler = callback\n        \n        // Simple timestamp for filename\n        let now = new Date()",
        "content": "exportType = type\n        handler = callback\n        \n        // Simple timestamp for filename\n        let now = new Date()"
      },
      {
        "file": "qml/components/exports/ExportFileDialog.qml",
        "calculator": "ExportFileDialogCalculator",
        "function": "exportType = type\n        handler = callback\n        \n        // Simple timestamp for filename\n        let now = new Date()",
        "content": "exportType = type\n        handler = callback\n        \n        // Simple timestamp for filename\n        let now = new Date()"
      },
      {
        "file": "qml/components/exports/FileSaveHandler.qml",
        "calculator": "FileSaveHandler",
        "function": "exported_data\"\n    property var saveHandler: null\n    property string lastSavedPath: \"\"\n    property bool busy: false\n    \n    // File saver instance\n    property FileSaver fileSaver: FileSaver",
        "content": "exported_data\"\n    property var saveHandler: null\n    property string lastSavedPath: \"\"\n    property bool busy: false\n    \n    // File saver instance\n    property FileSaver fileSaver: FileSaver {}\n    \n    // Public methods for saving different file types\n    function saveTextFile(content, fileName = defaultName)"
      },
      {
        "file": "qml/components/exports/FileSaveHandler.qml",
        "calculator": "FileSaveHandlerCalculator",
        "function": "exported_data\"\n    property var saveHandler: null\n    property string lastSavedPath: \"\"\n    property bool busy: false\n    \n    // File saver instance\n    property FileSaver fileSaver: FileSaver",
        "content": "exported_data\"\n    property var saveHandler: null\n    property string lastSavedPath: \"\"\n    property bool busy: false\n    \n    // File saver instance\n    property FileSaver fileSaver: FileSaver {}\n    \n    // Public methods for saving different file types\n    function saveTextFile(content, fileName = defaultName)"
      },
      {
        "file": "qml/components/exports/LogExporter.qml",
        "calculator": "LogExporter",
        "function": "function exportLogs(filePath)",
        "content": "function exportLogs(filePath) {\n        // Guard against missing logManager\n        if (!logManager) {\n            console.error(\"No logManager provided to LogExporter\")\n            return { success: false, filePath: filePath }"
      },
      {
        "file": "qml/components/exports/LogExporter.qml",
        "calculator": "LogExporterCalculator",
        "function": "function exportLogs(filePath)",
        "content": "function exportLogs(filePath) {\n        // Guard against missing logManager\n        if (!logManager) {\n            console.error(\"No logManager provided to LogExporter\")\n            return { success: false, filePath: filePath }"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtTest/TestCase.qml",
        "calculator": "TestCase",
        "function": "printed by the test framework when a row fails, to help the reader\n    identify which case failed amongst a set of otherwise passing tests.\n\n    \\section1 Benchmarks\n\n    Functions whose names start with \"benchmark_\" will be run multiple\n    times with the Qt benchmark framework, with an average timing value\n    reported for the runs.  This is equivalent to using the \\c",
        "content": "printed by the test framework when a row fails, to help the reader\n    identify which case failed amongst a set of otherwise passing tests.\n\n    \\section1 Benchmarks\n\n    Functions whose names start with \"benchmark_\" will be run multiple\n    times with the Qt benchmark framework, with an average timing value\n    reported for the runs.  This is equivalent to using the \\c{QBENCHMARK}\n    macro in the C++ version of QTestLib.\n\n    \\code\n    TestCase {\n        id: top\n        name: \"CreateBenchmark\"\n\n        function benchmark_create_component()"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtTest/TestCase.qml",
        "calculator": "TestCaseCalculator",
        "function": "printed by the test framework when a row fails, to help the reader\n    identify which case failed amongst a set of otherwise passing tests.\n\n    \\section1 Benchmarks\n\n    Functions whose names start with \"benchmark_\" will be run multiple\n    times with the Qt benchmark framework, with an average timing value\n    reported for the runs.  This is equivalent to using the \\c",
        "content": "printed by the test framework when a row fails, to help the reader\n    identify which case failed amongst a set of otherwise passing tests.\n\n    \\section1 Benchmarks\n\n    Functions whose names start with \"benchmark_\" will be run multiple\n    times with the Qt benchmark framework, with an average timing value\n    reported for the runs.  This is equivalent to using the \\c{QBENCHMARK}\n    macro in the C++ version of QTestLib.\n\n    \\code\n    TestCase {\n        id: top\n        name: \"CreateBenchmark\"\n\n        function benchmark_create_component()"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtTest/TestCase.qml",
        "calculator": "TestCase",
        "function": "prints the optional \\a message.\n        If this is a data-driven test, then only the current row is skipped.\n        Similar to \\c",
        "content": "prints the optional \\a message.\n        If this is a data-driven test, then only the current row is skipped.\n        Similar to \\c{QSKIP(message)"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtTest/TestCase.qml",
        "calculator": "TestCaseCalculator",
        "function": "prints the optional \\a message.\n        If this is a data-driven test, then only the current row is skipped.\n        Similar to \\c",
        "content": "prints the optional \\a message.\n        If this is a data-driven test, then only the current row is skipped.\n        Similar to \\c{QSKIP(message)"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtTest/TestCase.qml",
        "calculator": "TestCase",
        "function": "printed and the test passes.  If the message\n        does not occur, then the test will fail.  Similar to\n        \\c",
        "content": "printed and the test passes.  If the message\n        does not occur, then the test will fail.  Similar to\n        \\c{QTest::ignoreMessage(QtWarningMsg, message)"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtTest/TestCase.qml",
        "calculator": "TestCaseCalculator",
        "function": "printed and the test passes.  If the message\n        does not occur, then the test will fail.  Similar to\n        \\c",
        "content": "printed and the test passes.  If the message\n        does not occur, then the test will fail.  Similar to\n        \\c{QTest::ignoreMessage(QtWarningMsg, message)"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/Controls/FluentWinUI3/Config.qml",
        "calculator": "Config",
        "function": "export",
        "content": "Pattern 'export' found but function definition not extracted"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/Controls/FluentWinUI3/Config.qml",
        "calculator": "ConfigCalculator",
        "function": "export",
        "content": "Pattern 'export' found but function definition not extracted"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/Controls/FluentWinUI3/StyleImage.qml",
        "calculator": "StyleImage",
        "function": "print(\"StyleImage has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")",
        "content": "print(\"StyleImage has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/Controls/FluentWinUI3/StyleImage.qml",
        "calculator": "StyleImageCalculator",
        "function": "print(\"StyleImage has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")",
        "content": "print(\"StyleImage has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/Controls/FluentWinUI3/FocusFrame.qml",
        "calculator": "FocusFrame",
        "function": "print(\"FocusFrame has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")",
        "content": "print(\"FocusFrame has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/Controls/FluentWinUI3/FocusFrame.qml",
        "calculator": "FocusFrameCalculator",
        "function": "print(\"FocusFrame has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")",
        "content": "print(\"FocusFrame has been moved to private FluentWinUI3.impl module \"\n             + \"and is no longer part of the public QML API.\")"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/tooling/Component.qml",
        "calculator": "Component",
        "function": "export",
        "content": "Pattern 'export' found but function definition not extracted"
      },
      {
        "file": "venv/lib/python3.13/site-packages/PySide6/Qt/qml/QtQuick/tooling/Component.qml",
        "calculator": "ComponentCalculator",
        "function": "export",
        "content": "Pattern 'export' found but function definition not extracted"
      },
      {
        "file": "docs/application/Helper.qml",
        "calculator": "Helper",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\n\n// copilot checks\n\nAre you able to check the calculations in this file please?\nAre there any changes needed to the qml file?\nCan you modify this file so it looks nice please?\nCan you check the accuracy of the calculations in this file please and generate documentation?\n\n\n// section header\n\n// Header with title and help button\nRowLayout",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\n\n// copilot checks\n\nAre you able to check the calculations in this file please?\nAre there any changes needed to the qml file?\nCan you modify this file so it looks nice please?\nCan you check the accuracy of the calculations in this file please and generate documentation?\n\n\n// section header\n\n// Header with title and help button\nRowLayout {\n    id: topHeader\n    Layout.fillWidth: true\n    Layout.bottomMargin: 5\n    Layout.leftMargin: 5\n\n    Label {\n        text: \"Transmission Line Calculator\"\n        font.pixelSize: 20\n        font.bold: true\n        Layout.fillWidth: true\n    }\n\n    StyledButton {\n        id: helpButton\n        visible: false\n        icon.source: \"../../../icons/rounded/info.svg\"\n        ToolTip.text: \"Information\"\n        ToolTip.visible: hovered\n        ToolTip.delay: 500\n        onClicked: popUpText.open()"
      },
      {
        "file": "docs/application/Helper.qml",
        "calculator": "HelperCalculator",
        "function": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\n\n// copilot checks\n\nAre you able to check the calculations in this file please?\nAre there any changes needed to the qml file?\nCan you modify this file so it looks nice please?\nCan you check the accuracy of the calculations in this file please and generate documentation?\n\n\n// section header\n\n// Header with title and help button\nRowLayout",
        "content": "exports\"\nimport \"../../components/charts\"\nimport \"../../components/displays\"\n\n// copilot checks\n\nAre you able to check the calculations in this file please?\nAre there any changes needed to the qml file?\nCan you modify this file so it looks nice please?\nCan you check the accuracy of the calculations in this file please and generate documentation?\n\n\n// section header\n\n// Header with title and help button\nRowLayout {\n    id: topHeader\n    Layout.fillWidth: true\n    Layout.bottomMargin: 5\n    Layout.leftMargin: 5\n\n    Label {\n        text: \"Transmission Line Calculator\"\n        font.pixelSize: 20\n        font.bold: true\n        Layout.fillWidth: true\n    }\n\n    StyledButton {\n        id: helpButton\n        visible: false\n        icon.source: \"../../../icons/rounded/info.svg\"\n        ToolTip.text: \"Information\"\n        ToolTip.visible: hovered\n        ToolTip.delay: 500\n        onClicked: popUpText.open()"
      }
    ],
    "png": [
      {
        "file": "qml/calculators/grid_wind/WindTurbineSection.qml",
        "calculator": "WindTurbineSection",
        "function": "function saveChartImage(filePath)",
        "content": "function saveChartImage(filePath) {\n                            return powerCurveChart.grabToImage(function(result) {\n                                if (result) {\n                                    let success = result.saveToFile(filePath)\n                                    return filePath\n                                }"
      },
      {
        "file": "qml/calculators/protection/DiscriminationAnalyzer.qml",
        "calculator": "DiscriminationAnalyzer",
        "function": "saveChartImage(filename)",
        "content": "saveChartImage(filename)"
      },
      {
        "file": "qml/calculators/protection/DiscriminationAnalyzer.qml",
        "calculator": "DiscriminationAnalyzerCalculator",
        "function": "saveChartImage(filename)",
        "content": "saveChartImage(filename)"
      },
      {
        "file": "qml/calculators/protection/VR32CL7Calculator.qml",
        "calculator": "VR32CL7Calculator",
        "function": "generate_plot_with_url(folderUrl)",
        "content": "generate_plot_with_url(folderUrl)"
      },
      {
        "file": "qml/calculators/theory/RLC.qml",
        "calculator": "RLC",
        "function": "saveChart(selectedFile, currentScale)",
        "content": "saveChart(selectedFile, currentScale)"
      },
      {
        "file": "qml/calculators/theory/RLC.qml",
        "calculator": "RLCCalculator",
        "function": "saveChart(selectedFile, currentScale)",
        "content": "saveChart(selectedFile, currentScale)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrion",
        "function": "saveChart(selectedFile, currentScale)",
        "content": "saveChart(selectedFile, currentScale)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropOrion.qml",
        "calculator": "VoltageDropOrionCalculator",
        "function": "saveChart(selectedFile, currentScale)",
        "content": "saveChart(selectedFile, currentScale)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "captureImage()",
        "content": "captureImage()"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "captureImage()",
        "content": "captureImage()"
      },
      {
        "file": "qml/components/visualizers/NetworkCabinetDiagram.qml",
        "calculator": "NetworkCabinetDiagram",
        "function": "function captureImage()",
        "content": "function captureImage() {\n        // First ensure we have the latest panel visibility\n        canvas.requestPaint()\n        \n        // Determine optimal scale factor based on canvas size\n        let scaleFactor\n        if (canvas.width > 800 || canvas.height > 800) {\n            scaleFactor = 1.5  // For very large canvases\n        }"
      },
      {
        "file": "qml/components/visualizers/NetworkCabinetDiagram.qml",
        "calculator": "NetworkCabinetDiagramCalculator",
        "function": "function captureImage()",
        "content": "function captureImage() {\n        // First ensure we have the latest panel visibility\n        canvas.requestPaint()\n        \n        // Determine optimal scale factor based on canvas size\n        let scaleFactor\n        if (canvas.width > 800 || canvas.height > 800) {\n            scaleFactor = 1.5  // For very large canvases\n        }"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChart",
        "function": "saveChart(null, 1.0)",
        "content": "saveChart(null, 1.0)"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChartCalculator",
        "function": "saveChart(null, 1.0)",
        "content": "saveChart(null, 1.0)"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChart",
        "function": "saveChart(null, 2.0)",
        "content": "saveChart(null, 2.0)"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChartCalculator",
        "function": "saveChart(null, 2.0)",
        "content": "saveChart(null, 2.0)"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChart",
        "function": "saveChart(null, 4.0)",
        "content": "saveChart(null, 4.0)"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChartCalculator",
        "function": "saveChart(null, 4.0)",
        "content": "saveChart(null, 4.0)"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChart",
        "function": "saveChart(null, scale)",
        "content": "saveChart(null, scale)"
      },
      {
        "file": "qml/components/charts/VoltageDropChart.qml",
        "calculator": "VoltageDropChartCalculator",
        "function": "saveChart(null, scale)",
        "content": "saveChart(null, scale)"
      },
      {
        "file": "qml/components/charts/DiscriminationChart.qml",
        "calculator": "DiscriminationChart",
        "function": "function saveChartAsSVG(filename)",
        "content": "function saveChartAsSVG(filename) {\n        // Temporarily increase line widths for better visibility in SVG\n        let originalWidths = []\n        relaySeries.forEach((series, index) => {\n            originalWidths[index] = series.width\n            series.width = series.width * 2.0  // Even thicker for SVG\n        }"
      },
      {
        "file": "qml/components/charts/DiscriminationChart.qml",
        "calculator": "DiscriminationChartCalculator",
        "function": "function saveChartAsSVG(filename)",
        "content": "function saveChartAsSVG(filename) {\n        // Temporarily increase line widths for better visibility in SVG\n        let originalWidths = []\n        relaySeries.forEach((series, index) => {\n            originalWidths[index] = series.width\n            series.width = series.width * 2.0  // Even thicker for SVG\n        }"
      },
      {
        "file": "qml/components/charts/DiscriminationChart.qml",
        "calculator": "DiscriminationChart",
        "function": "function saveChartImage(filename)",
        "content": "function saveChartImage(filename) {\n        // Always try to save as SVG first\n        let svgFilename = filename\n        if (!svgFilename.endsWith(\".svg\")) {\n            svgFilename = filename.replace(/\\.[^/.]+$/, \"\") + \".svg\"\n        }"
      },
      {
        "file": "qml/components/charts/DiscriminationChart.qml",
        "calculator": "DiscriminationChartCalculator",
        "function": "function saveChartImage(filename)",
        "content": "function saveChartImage(filename) {\n        // Always try to save as SVG first\n        let svgFilename = filename\n        if (!svgFilename.endsWith(\".svg\")) {\n            svgFilename = filename.replace(/\\.[^/.]+$/, \"\") + \".svg\"\n        }"
      }
    ],
    "pdf": [
      {
        "file": "qml/calculators/protection/DiscriminationAnalyzer.qml",
        "calculator": "DiscriminationAnalyzer",
        "function": "exportResults()",
        "content": "exportResults()"
      },
      {
        "file": "qml/calculators/protection/DiscriminationAnalyzer.qml",
        "calculator": "DiscriminationAnalyzerCalculator",
        "function": "exportResults()",
        "content": "exportResults()"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRf",
        "function": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)",
        "content": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRfCalculator",
        "function": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)",
        "content": "exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRf",
        "function": "function saveToPdf()",
        "content": "function saveToPdf() {\n        // Use the calculator's exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)\n    }"
      },
      {
        "file": "qml/calculators/protection/SolkorRf.qml",
        "calculator": "SolkorRfCalculator",
        "function": "function saveToPdf()",
        "content": "function saveToPdf() {\n        // Use the calculator's exportToPdf with null parameter\n        // to let FileSaver handle the file dialog\n        calculator.exportToPdf(null)\n    }"
      },
      {
        "file": "qml/calculators/protection/VR32CL7Calculator.qml",
        "calculator": "VR32CL7Calculator",
        "function": "generate_plot_with_url(folderUrl)",
        "content": "generate_plot_with_url(folderUrl)"
      },
      {
        "file": "qml/calculators/theory/MotorStartingCalculator.qml",
        "calculator": "MotorStartingCalculator",
        "function": "exportResults(null)",
        "content": "exportResults(null)"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropDetails.qml",
        "calculator": "VoltageDropDetails",
        "function": "saveToPdfRequested()",
        "content": "saveToPdfRequested()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropDetails.qml",
        "calculator": "VoltageDropDetailsCalculator",
        "function": "saveToPdfRequested()",
        "content": "saveToPdfRequested()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropDetails.qml",
        "calculator": "VoltageDropDetails",
        "function": "saveToPdfRequested()",
        "content": "saveToPdfRequested()"
      },
      {
        "file": "qml/calculators/voltage_drop/VoltageDropDetails.qml",
        "calculator": "VoltageDropDetailsCalculator",
        "function": "saveToPdfRequested()",
        "content": "saveToPdfRequested()"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "exportToPdf(folderDialog.folder, diagramImage)",
        "content": "exportToPdf(folderDialog.folder, diagramImage)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "exportToPdf(null, diagramImage)",
        "content": "exportToPdf(null, diagramImage)"
      }
    ],
    "csv": [
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzer",
        "function": "exportDataToCSV(null)",
        "content": "exportDataToCSV(null)"
      },
      {
        "file": "qml/calculators/theory/HarmonicsAnalyzer.qml",
        "calculator": "HarmonicsAnalyzerCalculator",
        "function": "exportDataToCSV(null)",
        "content": "exportDataToCSV(null)"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "exportCSV()",
        "content": "exportCSV()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "exportCSV()",
        "content": "exportCSV()"
      }
    ],
    "json": [
      {
        "file": "qml/calculators/theory/RealTime.qml",
        "calculator": "RealTime",
        "function": "saveConfiguration()",
        "content": "saveConfiguration()"
      },
      {
        "file": "qml/calculators/theory/RealTime.qml",
        "calculator": "RealTimeCalculator",
        "function": "saveConfiguration()",
        "content": "saveConfiguration()"
      },
      {
        "file": "qml/calculators/theory/RealTime.qml",
        "calculator": "RealTime",
        "function": "loadConfiguration()",
        "content": "loadConfiguration()"
      },
      {
        "file": "qml/calculators/theory/RealTime.qml",
        "calculator": "RealTimeCalculator",
        "function": "loadConfiguration()",
        "content": "loadConfiguration()"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "saveConfigDialog\n        title: \"Save Configuration\"\n        fileMode: FileDialog.SaveFile\n        nameFilters: [\"JSON Files (*.json)",
        "content": "saveConfigDialog\n        title: \"Save Configuration\"\n        fileMode: FileDialog.SaveFile\n        nameFilters: [\"JSON Files (*.json)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "saveConfig(saveConfigDialog.file)",
        "content": "saveConfig(saveConfigDialog.file)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "saveConfig(null)",
        "content": "saveConfig(null)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "loadConfigDialog\n        title: \"Load Configuration\"\n        fileMode: FileDialog.OpenFile\n        nameFilters: [\"JSON Files (*.json)",
        "content": "loadConfigDialog\n        title: \"Load Configuration\"\n        fileMode: FileDialog.OpenFile\n        nameFilters: [\"JSON Files (*.json)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "loadConfig(loadConfigDialog.file)",
        "content": "loadConfig(loadConfigDialog.file)"
      },
      {
        "file": "qml/calculators/cable/NetworkCabinetCalculator.qml",
        "calculator": "NetworkCabinetCalculator",
        "function": "loadConfig(null)",
        "content": "loadConfig(null)"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "saveToJSON()",
        "content": "saveToJSON()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "saveToJSON()",
        "content": "saveToJSON()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanel",
        "function": "loadFromJSON(fileDialog.selectedFile.toString()",
        "content": "loadFromJSON(fileDialog.selectedFile.toString()"
      },
      {
        "file": "qml/calculators/cable/SwitchboardPanel.qml",
        "calculator": "SwitchboardPanelCalculator",
        "function": "loadFromJSON(fileDialog.selectedFile.toString()",
        "content": "loadFromJSON(fileDialog.selectedFile.toString()"
      }
    ]
  }
}